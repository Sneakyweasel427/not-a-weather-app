{"ast":null,"code":"import { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/weather.service\";\nimport * as i2 from \"@angular/common\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(weatherService, datePipe) {\n      this.weatherService = weatherService;\n      this.datePipe = datePipe;\n      this.title = 'not-a-weather-app';\n    }\n\n    ngOnInit() {\n      this.loading = true;\n      lastValueFrom(this.weatherService.getUserData()).then(userData => {\n        this.userData = userData;\n\n        if (this.userData.country_code === 'United States of America') {\n          this.tempUnit = 'f';\n          this.measurementUnit = 'empirical';\n        } else {\n          this.tempUnit = 'c';\n          this.measurementUnit = 'metric';\n        }\n\n        const today = new Date(this.userData.localtime_epoch * 1000);\n        let yesterday = new Date(today.getDate() - 1);\n        yesterday = this.datePipe.transform(yesterday, 'yyyy-MM-dd');\n        lastValueFrom(this.weatherService.getYesterdaysWeather(this.userData, yesterday)).then(res => {\n          this.yesterdaysWeather = res;\n          console.log(this.yesterdaysWeather);\n        }).catch(error => {\n          console.error(error ? error.error.error.code + ' - ' + error.error.error.message : 'Weather data unavailable');\n        }).finally(() => this.loading = false);\n      }).catch(error => console.error(error ? error.error.error.code + ' - ' + error.error.error.message : 'User location data unavailable'));\n    }\n\n    onTempUnitChange(unit) {\n      this.tempUnit = unit;\n    }\n\n    onMeasurementUnitChange(unit) {\n      this.measurementUnit = unit;\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.WeatherService), i0.ɵɵdirectiveInject(i2.DatePipe));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 0,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}